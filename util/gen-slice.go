// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package util

import (
	"bytes"
	"fmt"
)

func StringInSlice(a String, list []String) (bool, int) {
	for i, b := range list {
		if b.Equals(a) {
			return true, i
		}
	}
	return false, -1
}

func MapStringsToStrings(a []String) []string {
	result := make([]string, len(a))
	for i := 0; i < len(a); i++ {
		result[i] = fmt.Sprint(a[i])
	}

	return result
}

func RemoveFromStringSlice(slice []String, idx int) []String {
	return append(slice[:idx:idx], slice[idx+1:]...)
}

func CloneStringSlice(slice []String) []String {
	cloned := make([]String, len(slice))
	for i := 0; i < len(slice); i++ {
		cloned[i] = slice[i]
	}

	return cloned
}

func MaxString(array []String) (max String, index int) {
	result := array[0]
	index = 0
	for i, v := range array[1:] {
		if v.GreaterThan(result) {
			result, index = v, i+1
		}
	}
	return result, index
}

func StringJoint(array []String, sep string) string {
	var buf bytes.Buffer
	first := false
	for _, val := range array {
		if !first {
			buf.WriteString(sep)
		}
		first = false
		buf.WriteString(val.String())
	}

	return buf.String()
}

func IntInSlice(a Int, list []Int) (bool, int) {
	for i, b := range list {
		if b.Equals(a) {
			return true, i
		}
	}
	return false, -1
}

func MapIntsToStrings(a []Int) []string {
	result := make([]string, len(a))
	for i := 0; i < len(a); i++ {
		result[i] = fmt.Sprint(a[i])
	}

	return result
}

func RemoveFromIntSlice(slice []Int, idx int) []Int {
	return append(slice[:idx:idx], slice[idx+1:]...)
}

func CloneIntSlice(slice []Int) []Int {
	cloned := make([]Int, len(slice))
	for i := 0; i < len(slice); i++ {
		cloned[i] = slice[i]
	}

	return cloned
}

func MaxInt(array []Int) (max Int, index int) {
	result := array[0]
	index = 0
	for i, v := range array[1:] {
		if v.GreaterThan(result) {
			result, index = v, i+1
		}
	}
	return result, index
}

func IntJoint(array []Int, sep string) string {
	var buf bytes.Buffer
	first := false
	for _, val := range array {
		if !first {
			buf.WriteString(sep)
		}
		first = false
		buf.WriteString(val.String())
	}

	return buf.String()
}
