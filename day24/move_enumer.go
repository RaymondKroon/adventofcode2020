// Code generated by "enumer -type=Move -text"; DO NOT EDIT.

package main

import (
	"fmt"
	"strings"
)

const _MoveName = "eseswwnwne"

var _MoveIndex = [...]uint8{0, 1, 3, 5, 6, 8, 10}

const _MoveLowerName = "eseswwnwne"

func (i Move) String() string {
	i -= 1
	if i < 0 || i >= Move(len(_MoveIndex)-1) {
		return fmt.Sprintf("Move(%d)", i+1)
	}
	return _MoveName[_MoveIndex[i]:_MoveIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _MoveNoOp() {
	var x [1]struct{}
	_ = x[e-(1)]
	_ = x[se-(2)]
	_ = x[sw-(3)]
	_ = x[w-(4)]
	_ = x[nw-(5)]
	_ = x[ne-(6)]
}

var _MoveValues = []Move{e, se, sw, w, nw, ne}

var _MoveNameToValueMap = map[string]Move{
	_MoveName[0:1]:       e,
	_MoveLowerName[0:1]:  e,
	_MoveName[1:3]:       se,
	_MoveLowerName[1:3]:  se,
	_MoveName[3:5]:       sw,
	_MoveLowerName[3:5]:  sw,
	_MoveName[5:6]:       w,
	_MoveLowerName[5:6]:  w,
	_MoveName[6:8]:       nw,
	_MoveLowerName[6:8]:  nw,
	_MoveName[8:10]:      ne,
	_MoveLowerName[8:10]: ne,
}

var _MoveNames = []string{
	_MoveName[0:1],
	_MoveName[1:3],
	_MoveName[3:5],
	_MoveName[5:6],
	_MoveName[6:8],
	_MoveName[8:10],
}

// MoveString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func MoveString(s string) (Move, error) {
	if val, ok := _MoveNameToValueMap[s]; ok {
		return val, nil
	}
	s = strings.ToLower(s)
	if val, ok := _MoveNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Move values", s)
}

// MoveValues returns all values of the enum
func MoveValues() []Move {
	return _MoveValues
}

// MoveStrings returns a slice of all String values of the enum
func MoveStrings() []string {
	strs := make([]string, len(_MoveNames))
	copy(strs, _MoveNames)
	return strs
}

// IsAMove returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Move) IsAMove() bool {
	for _, v := range _MoveValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalText implements the encoding.TextMarshaler interface for Move
func (i Move) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for Move
func (i *Move) UnmarshalText(text []byte) error {
	var err error
	*i, err = MoveString(string(text))
	return err
}
